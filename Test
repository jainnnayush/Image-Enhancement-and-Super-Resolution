{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Test","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyONPyISRnc/khHsrUYL9Uwr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"hFFjYCTYFYO9"},"source":["# Importing Google Drive\n","*   Click on the link and Select rishiraj.bhosale1011@gmail.com\n","*   Click on Allow\n","*   Then copy the code and paste it in the box and press *ENTER*\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1MRsBcowifC","executionInfo":{"status":"ok","timestamp":1617910024891,"user_tz":420,"elapsed":28347,"user":{"displayName":"Rishiraj Bhosale","photoUrl":"","userId":"11657221070443566547"}},"outputId":"33f3349b-fe10-4b30-a301-e5d73708e582"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3z88cSsDGFhQ"},"source":["# IMPORT\n","*   Importing all the Libraries\n","\n","*   Loading all the Pretrained models"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DsS0YLN_MZ29","executionInfo":{"status":"ok","timestamp":1617910031850,"user_tz":420,"elapsed":3875,"user":{"displayName":"Rishiraj Bhosale","photoUrl":"","userId":"11657221070443566547"}},"outputId":"42e4f618-ded2-4c44-a8ba-66fd06b86b3b"},"source":["!pip install pytorch-msssim"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting pytorch-msssim\n","  Downloading https://files.pythonhosted.org/packages/9d/d3/3cb0f397232cf79e1762323c3a8862e39ad53eca0bb5f6be9ccc8e7c070e/pytorch_msssim-0.2.1-py3-none-any.whl\n","Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (from pytorch-msssim) (1.8.1+cu101)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torch->pytorch-msssim) (1.19.5)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch->pytorch-msssim) (3.7.4.3)\n","Installing collected packages: pytorch-msssim\n","Successfully installed pytorch-msssim-0.2.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QnoHkeTkF3bq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617910054746,"user_tz":420,"elapsed":25983,"user":{"displayName":"Rishiraj Bhosale","photoUrl":"","userId":"11657221070443566547"}},"outputId":"f01d14c1-f6f4-4655-e72d-d97fa5e951f8"},"source":["import glob\n","import random\n","import os\n","import argparse\n","import math\n","import itertools\n","import sys\n","import numpy as np\n","import pandas as pd\n","from matplotlib import pyplot as plt\n","\n","\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n","from PIL import Image\n","import torchvision.transforms as transforms\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torchvision.utils import save_image, make_grid\n","from torch.autograd import Variable\n","\n","from drive.MyDrive.ImageSuperResolution  import LLCNN\n","from drive.MyDrive.ImageSuperResolution import SRGAN\n","from drive.MyDrive.ImageSuperResolution import final\n","\n","n_llcnn = 200\n","n_srgan = 200 \n","n_final = 200\n","channels = 3\n","\n","CONV_BLOCKS_llcnn = 5\n","RESIDUAL = True\n","CONV_BLOCKS_final = 5\n","\n","cuda = torch.cuda.is_available()\n","\n","llcnn = LLCNN.LLCNN(channels, CONV_BLOCKS_llcnn, RESIDUAL)\n","generator = SRGAN.GeneratorResNet()\n","final = final.out(channels, CONV_BLOCKS_final)\n","\n","if cuda:\n","    llcnn = llcnn.cuda()\n","    generator = generator.cuda()\n","    final = final.cuda()\n","    \n","llcnn.load_state_dict(torch.load(\"drive/MyDrive/ImageSuperResolution/LLCNN/saved_models/model_\"+str(n_llcnn-1)+\".pth\"))\n","generator.load_state_dict(torch.load(\"drive/MyDrive/ImageSuperResolution/SRGAN/saved_models/generator_\"+str(n_srgan-1)+\".pth\"))\n","final.load_state_dict(torch.load(\"drive/MyDrive/ImageSuperResolution/final/saved_models/out_\"+str(n_final-1)+\".pth\"))"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"vtE6M4vMHQXZ"},"source":["# Creating Dataset and Dataloader of Images from Sample Folder"]},{"cell_type":"code","metadata":{"id":"yAc1kQdwF7PT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617910054747,"user_tz":420,"elapsed":21695,"user":{"displayName":"Rishiraj Bhosale","photoUrl":"","userId":"11657221070443566547"}},"outputId":"30a56335-2c4f-4d37-f60d-845f861c6f9f"},"source":["class ImageDataset(Dataset):\n","    def __init__(self, root, shape, transform):\n","        height, width = shape\n","        # Transforms for low resolution images and high resolution images\n","        self.transform = transform\n","\n","        self.files = sorted(glob.glob(root + \"/*.*\"))\n","\n","    def __getitem__(self, index):\n","        low_path = self.files[index % len(self.files)]\n","        img_low = Image.open(low_path)\n","        img_low = self.transform(img_low)\n","        name = low_path[51:]\n","\n","        return {\"low\": img_low, \"name\": name}\n","\n","\n","    def __len__(self):\n","        return len(self.files)\n","\n","shape = (400//4,400//4)\n","\n","transform = transforms.Compose(\n","            [\n","                transforms.Resize((shape[0], shape[1]), Image.BICUBIC), #Convert 400X400 Image into 100X100 Image\n","                transforms.ToTensor(),\n","                #transforms.Normalize(mean, std),\n","            ]\n","        )"],"execution_count":4,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torchvision/transforms/transforms.py:258: UserWarning: Argument interpolation should be of type InterpolationMode instead of int. Please, use InterpolationMode enum.\n","  \"Argument interpolation should be of type InterpolationMode instead of int. \"\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"vYoZ0a1WGglB","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1617910055031,"user_tz":420,"elapsed":20782,"user":{"displayName":"Rishiraj Bhosale","photoUrl":"","userId":"11657221070443566547"}},"outputId":"b3741ed8-d0f2-49a7-cdda-c6fdd9cf9535"},"source":["root = '/content/drive/MyDrive/ImageSuperResolution/Sample'\n","data = ImageDataset(root, shape, transform)\n","data[0]['name']"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'image5021.jpg'"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"86wJR0xEGjd2","executionInfo":{"status":"ok","timestamp":1617910055032,"user_tz":420,"elapsed":19883,"user":{"displayName":"Rishiraj Bhosale","photoUrl":"","userId":"11657221070443566547"}}},"source":["dataloader = DataLoader(\n","    data,\n","    batch_size=1,#batch_size,#len(data),\n","    shuffle=True,\n","    num_workers=0,\n",")"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n-qWlEfJHcR8"},"source":["# Running the pipeline and saving the Images\n","\n","*   Passing a 100X100 Low-Light Image into the LLCNN\n","\n","*   Passing the LLCNN generated image into SRGAN generator\n","*   Passing the SRGAN generated image into Final Model\n","*   We can view all the generated images into Sample_output folder in DRIVE\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"Mx57oWzYJL4q","executionInfo":{"status":"ok","timestamp":1617910078180,"user_tz":420,"elapsed":40784,"user":{"displayName":"Rishiraj Bhosale","photoUrl":"","userId":"11657221070443566547"}}},"source":["generated_image_root = '/content/drive/MyDrive/ImageSuperResolution/Sample_output/'\n","Tensor = torch.cuda.FloatTensor if cuda else torch.Tensor\n","for i, imgs in enumerate(dataloader):\n","        img_low = Variable(imgs[\"low\"].type(Tensor))\n","\n","        outputs_llcnn = llcnn(img_low)\n","        outputs_srgan = generator(outputs_llcnn)\n","        outputs_final = final(outputs_srgan)\n","\n","        for i, img in enumerate(img_low):\n","          save_image(img, generated_image_root + '100X100_low/' + imgs['name'][i])  \n","        for i, img in enumerate(outputs_llcnn):\n","            save_image(img, generated_image_root + 'LLCNN_generated/' + imgs['name'][i])\n","\n","        for i, img in enumerate(outputs_srgan):\n","            save_image(img, generated_image_root + 'SRGAN_generated/' + imgs['name'][i])\n","\n","        for i, img in enumerate(outputs_final):\n","            save_image(img, generated_image_root + 'FINAL_generated/' + imgs['name'][i])"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"2UEFsqI_IEnQ"},"source":[""],"execution_count":null,"outputs":[]}]}